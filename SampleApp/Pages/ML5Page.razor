@page "/ml5"

@using BlazorBindGen
@using BlazorBindGen.Attributes
@using SampleApp.JSBinding
@using static BlazorBindGen.BindGen

@inject IJSRuntime runtime

@if (isLoaded)
{
    <input type="text" class="bg-dark text-white border-light" @bind="predictText" placeholder="write review here " style="font-size:18px"/>
    <button class="btn btn-primary" id="mbtn" @onclick="Predict">Predict</button><br /><br />
    if(score>0)
    {
        <div class="alert alert-primary">
            <p>Review: @GetEmoji() <br />Score: @score</p>
        </div>
    }
}
else
{
    <div class="alert alert-warning">
        Fetching Movie Review Dataset (~16 MB)
    </div>
}
@code
{
    Sentiment sentiment;
    string predictText;
    bool isLoaded = false;
    double score;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitAsync(runtime);
        await ML5Init();
    }

    async Task ML5Init()
    {
        await ImportAsync("https://unpkg.com/ml5@latest/dist/ml5.min.js");
        Console.Clear();
        var ml5 = DomWindow.Ml5;
        sentiment = ml5.Sentiment("movieReviews",OnModelLoaded);
    }

    void Predict()
    {
        if (string.IsNullOrWhiteSpace(predictText))
            return;

        sentiment.Predict(predictText,GotResult);
       
    }

    void GotResult(Score v)
    {
        score = v.confidence;
        StateHasChanged();
    }

    void OnModelLoaded()
    {
        isLoaded = true;
        StateHasChanged();
    }

    string GetEmoji()
    {
        if (score > 0.7)
            return "😀";
        else if (score > 0.4)
            return "😐";
        else
            return "😥";

    }


}
